{
    "collab_server" : "",
    "contents" : "#! /usr/bin/Rscript --vanilla\n#\n# --------------------\n# process4saintq.R\n# --------------------\n# \n# Description\n# \n# Take the evidence file and keys (with the BioReplicaSaint column) \n# and it generates the input for saintq.\n# --------------------\n# \n# For any issue, contact David Jimenez-Morales at Krogan Lab\n# \n# (C) developers @ Kroganlab\n# \n\n\n#NOTE: make_annotation() file is now in the auxiliaryFunctions.R script.\n\n######\n#MOST OF THIS IS BASED ON DAVID JIMENEZ-MORALES' SCRIPT, PROCESS4SAINTQ.R. that is the original.\n#Modified to be contained within a function that returns global (<<-) variables. \n#This is done before producing the SAINTq-processed objects.\nparse_maxquant <- function(evidenceFile, proteinGroupsFile, annotationFile){\n    #Load dependencies\n    suppressMessages(require(bit64))\n    suppressMessages(library(reshape2))\n    suppressMessages(library(data.table))\n\n    #NOTE: ran everything together for simplicity.\n    data <- read.delim(evidenceFile, sep='\\t', stringsAsFactors = F) #evidence.txt\n    proteinGroups <- read.delim(proteinGroupsFile, sep=\"\\t\", stringsAsFactors = F) #proteinGroups.txt\n    keys <- read.delim(annotationFile, sep='\\t', stringsAsFactors = F) #from make_annotation\n    \n    ####\n    #INSERTED BY JUAN rename Raw.file if instead of RawFile (consequence of different versions of MaxQuant)\n    if((\"Raw.file\" %in% names(keys)) & !(\"RawFile\" %in% names(keys))) names(keys)[names(keys)==\"Raw.file\"]<-\"RawFile\"\n    if((\"Raw.file\" %in% names(data)) & !(\"RawFile\" %in% names(data))) names(data)[names(data)==\"Raw.file\"]<-\"RawFile\"\n    ####\n\n    # Check that the keys file is correct\n    if(any(!c('RawFile','IsotopeLabelType','Condition','BioReplicate','Run','SAINT','BioReplicaSaint') %in% colnames(keys))){\n        cat('\\nCOLNAMES IN KEYS NOT CONFORM TO SCHEMA. One of these is lost\\n\n            \\tRawFile\\n\\tIsotopeLabelType\\n\\tCondition\\n\\tBioReplicate\\\\ntRun\\n\\n\\tSAINT\\tBioReplicaSaint\\n\\n')\n        stop('Try again once revised\\n')\n    }\n\n    # MERGING THE DATA\n    # Checking that the keys make sense\n    unique_data <- unique(data$RawFile)\n    unique_keys <- unique(keys$RawFile)\n    \n    # Rawfiles on Keys not found on the data\n    keys_not_found <- setdiff(unique_keys, unique_data)\n    # Rawfiles on Data not found on the keys\n    data_not_found <- setdiff(unique_data, unique_keys)\n    \n    if ( (length(keys_not_found) != 0) & ( length(data_not_found) != 0) ) {\n        cat(sprintf(\"keys found: %s \\t keys not in data file:\\n%s\\n\", length(unique_keys)-length(keys_not_found), paste(keys_not_found,collapse='\\t')))\n        cat(sprintf(\"data found: %s \\t data not in keys file:\\n%s\\n\", length(unique_data)-length(data_not_found), paste(data_not_found, collapse='\\t')))\n        stop('\\nThis script is sorry, but it needs to stop this because something is going on between your keys and evidence files so you better check\\n')\n    }\n    \n    ## select only required attributes from MQ format\n    datamerged <- merge(data, keys, by='RawFile')\n    \n    #REPLACED BY JUAN FOR THIS\n    data_f1 <- datamerged[grep(\";\",datamerged$Protein.group.IDs, invert=T),]\n    ####\n\n    # Get rid of the contaminants\n    contaminants <- unique(data_f1[grep(\"CON__|REV__\", data_f1$Proteins),c(\"Proteins\", \"Gene.names\")])\n    print(\"REMEMBER to check the object 'contaminants' in case there's something you didn't want to remove!\")\n    data_f2 <- data_f1[grep(\"CON__|REV__\", data_f1$Proteins, invert=T),]\n    \n    if(length(which(data_f2$Proteins==\"\"))>0)  data_f2 <- data_f2[-which(data_f2$Proteins==\"\"),]\n    \n    \n    # Set the intensity as numeric to avoid overflow problems\n    data_f2$Intensity = as.numeric(data_f2$Intensity)\n\n\n    # ADDED BY JUAN - remove Methionine-containing peptides (NOTE: should be made optional argument?)\n    #data_f2<-data_f2[grep(\"M\", data_f2$Sequence,  invert=T),]\n\n\n    #MODIFIED BY JUAN - using protein groups as unique identifiers\n    suppressWarnings(protBiorepIntensity  <- dcast(data=data_f2[,c(\"Leading.razor.protein\",\"BioReplicaSaint\",\"Intensity\")], \n                                                   Leading.razor.protein~BioReplicaSaint, value.var = \"Intensity\", fun.aggregate = sum,\n                                                   na.rm = T, fill=0))\n\n    print(\"NOTE that the peptides are associated with the first protein in the protein group (for the sake of having single identifiers)\")\n    #Choose 'max' intensity instead of 'sum' to deal with duplicate entries (as MSstats does) \n    #(NOTE: implement as option? Im not sure which one works best) NEEDS TO BE TESTED\n    data_f2<-data_f2[!is.na(data_f2$Intensity),] #remove NA Intensities\n    data_f2$feature<-paste(data_f2$Modified.sequence, data_f2$Charge, sep = \"_\")\n    peptideBiorepIntensity <- dcast(data=data_f2[,c(\"Leading.razor.protein\",\"feature\",\"BioReplicaSaint\",\"Intensity\")],\n                                    Leading.razor.protein+feature~BioReplicaSaint, value.var = \"Intensity\", fun.aggregate = max, \n                                    na.rm = T, fill=0 )\n\n    #distribution of frequencies of feature+replicate combinations (should be mostly '1')\n    #table(table(paste(data_f2$feature, data_f2$BioReplicaSaint, sep = \"/\")))\n\n    names(protBiorepIntensity)[1] <- \"Proteins\"; names(peptideBiorepIntensity)[1] <- \"Proteins\"\n    protBiorepIntensity <- protBiorepIntensity[complete.cases(protBiorepIntensity),]\n    # Just in case there is NA values:\n    if(nrow(protBiorepIntensity[!complete.cases(protBiorepIntensity),])!=0){\n        print(\"WARNING: there were some NA values in the list of intensities. is this normal?\")\n    }\n\n    # Take only unique values of both sequences and proteins. Aggregate them to get the sequences for each protein\n    data_f2uniques <- unique(data_f2[,c(\"Proteins\", \"Sequence\")])\n    protPep <- aggregate(Sequence ~ Proteins, data_f2uniques, FUN = paste, collapse=\"|\" )\n    \n\n    # PROTEINS: extra step to add the information about peptides\n    almost <- merge(protBiorepIntensity, protPep, by=\"Proteins\", all.x = T)\n    final_result <- almost[,c(1,dim(almost)[2],2:(dim(almost)[2]-1)) ]\n    \n    #OUTPUT: spitting results\n    print(\"OUTPUT: list with three objects: protein list, peptide list, removed contaminants list\")\n    return(list(protBiorepIntensity, peptideBiorepIntensity, contaminants))\n    # protBiorepIntensity <<- protBiorepIntensity\n    # peptideBiorepIntensity <<- peptideBiorepIntensity\n    # contaminants <<- contaminants\n    # final_result <<- final_result\n    # proteinGroups <<- proteinGroups\n    # annotation <<- keys\n    # evidence <<- data\n}\n\n\ncreate_saintq_files <- function(protBiorepIntensity, peptideBiorepIntensity, final_result, keys){\n    #KEYS is from reading the annotation\n      \n    # SAINTQ HEADER (two extra rows on top)\n    x <- t(keys[,c('SAINT','Condition','BioReplicaSaint')])\n    extra <- cbind(c('','','Proteins'),c('','','Sequence'))\n    header <- t(cbind(extra, x))\n    theader <- t(header)\n    checkthis <- data.frame(theader, row.names = NULL, stringsAsFactors = F)\n    names(checkthis) = checkthis[3,]\n    \n    \n    # PROTEINS: ADDING HEADER, merging based on row names\n    proteinssaintqheader <- rbind(checkthis, final_result)\n    \n    # SEQUENCES: Adding HEADER:\n    names(peptideBiorepIntensity)[2]<-\"Sequence\" #fixing the peptide feature name. to be changed earlier in the code maybe?\n    sequencesaintqheader <- rbind(checkthis, peptideBiorepIntensity)\n    \n    #ADDED BY JUAN: to ensure replicates are in adjacent columns\n    sequencesaintqheader<-cbind(sequencesaintqheader[, 1:2], \n                                sequencesaintqheader[, order(colnames(\n                                    sequencesaintqheader[, 3:dim(sequencesaintqheader)[2]]))+2])\n    \n    proteinssaintqheader<-cbind(proteinssaintqheader[, 1:2], \n                                proteinssaintqheader[, order(colnames(\n                                    proteinssaintqheader[, 3:dim(proteinssaintqheader)[2]]))+2])\n    \n    # Writing the files for PROTEIN\n    output <- 'saintq/saintq_input_proteins.txt' # be careful changing this name because you also have to update the config file\n    dir.create(\"saintq\", showWarnings = F)\n    write.table(proteinssaintqheader, output, sep='\\t', row.names=F, col.names=F, quote=F)\n    \n    \n    cat (\"\n         ### SAINTq parameter file\n         ## use # to mark a line as comment\n         \n         ## normalize control intensities\n         normalize_control=false\n         \n         ## name of file with intensities\n         input_filename=saintq_input_proteins.txt\n         \n         ## valid: protein, peptide, fragment\n         input_level=protein\n         \n         ## column names\n         protein_colname=Proteins\n         \n         ## control bait selection rules\n         compress_n_ctrl=100\n         \n         ## test bait replicate selection rules\n         compress_n_rep=100\n         \", file=\"saintq/saintq-config-proteins\")\n    \n    \n    # WRITING the files for SEQUENCES\n    outsequences <- 'saintq/saintq_input_peptides.txt' # be careful changing this name because you also have to update the config file\n    write.table(sequencesaintqheader, outsequences, sep = '\\t', row.names = F, col.names = F, quote = F)\n    \n    cat (\"\n         ### SAINTq parameter file\n         ## use # to mark a line as comment\n         \n         ## normalize control intensities\n         normalize_control=false\n         \n         ## name of file with intensities\n         input_filename=saintq_input_peptides.txt\n         \n         ## type of intensity\n         ## valid: protein, peptide, fragment\n         input_level=peptide\n         \n         ## column names\n         protein_colname=Proteins\n         pep_colname=Sequence\n         \n         \n         ## control bait selection rules\n         compress_n_ctrl=100\n         \n         ## test bait replicate selection rules\n         compress_n_rep=100\n         \n         ## peptide selection rules\n         min_n_pep=3\n         best_prop_pep=0.5\n         \n         \", file=\"saintq/saintq-config-peptides\")\n    \n    cat(\"\\nDone! Check inside the new 'saintq' folder. \\nYou should find 4 files:\\n\\n\")\n    cat(\"\\t- saintq-config-peptides\\n\")\n    cat(\"\\t- saintq-config-proteins\\n\")\n    cat(\"\\t- saintq_input_peptides.txt\\n\")\n    cat(\"\\t- saintq_input_proteins.txt\\n\\n\")\n    cat(\"Now 'cd saintq' and run 'saintq saintq-config-peptides' and 'saintq saintq-config-proteins' and get the results right away\\n\\n\")\n    cat(\"You are welcome!\\n\\n\")\n}\n\n\n# \n# ####Running some tests to compare scores####\n# inputNewPeptide<-read.delim(\"saintq_new/saintq_input_peptides.txt\")\n# inputOldPeptide<-read.delim(\"saintq_old/saintq_input_peptides.txt\")\n# inputNewProtein<-read.delim(\"saintq_new/saintq_input_proteins.txt\")\n# inputOldProtein<-read.delim(\"saintq_old/saintq_input_proteins.txt\")\n# \n# colnames(inputNewPeptide)<-as.character(unlist(inputNewPeptide[2,])) #converting row names\n# inputNewPeptide<-inputNewPeptide[-c(1,2),]\n# \n# #a sample column comparison\n# colNew<-inputNewProtein[3:nrow(inputNewProtein),c(1,3)]\n# colOld<-inputOldProtein[3:nrow(inputOldProtein),c(1,3)]\n# m<-merge(colNew, colOld, by=\"X\", suffixes = c(\"_new\", \"_old\"))\n# m$T_new<-as.numeric(as.character(m$T_new))\n# m$T_old<-as.numeric(as.character(m$T_old))\n",
    "created" : 1509057929170.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "69457236",
    "id" : "E042C0EE",
    "lastKnownWriteTime" : 1512680479,
    "last_content_update" : 1512680479976,
    "path" : "~/Documents/Projects/JPB_endoBAG3homo_CMs_test/scripts/process4saintq_2.R",
    "project_path" : null,
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}