protBiorepIntensityImputed <- merge(protBiorepIntensityImputed, saintqPeptides[,c("Prey", "PreyGeneSingleName")], by.x="Proteins", by.y="Prey", all.x=T, all.y=F)
protBiorepIntensityNormalized <- protBiorepIntensity
#Median normalization
medians <- apply(protBiorepIntensityNormalized[,2:ncol(protBiorepIntensityNormalized)], 2, function(x){median(x[x!=0], na.rm=T)})
protBiorepIntensityNormalized[2:ncol(protBiorepIntensityNormalized)] <- apply(X = protBiorepIntensityNormalized[,2:ncol(protBiorepIntensityNormalized)],
MARGIN = 2, FUN = function(x) x/median(x[x!=0], na.rm = T)*mean(medians))
# #Bait normalization
# bag3Ints <- protBiorepIntensity[protBiorepIntensity$Proteins=="O95817",2:17]
# bag3Ints[bag3Ints==0] <- 1
# bag3Mean <- mean(as.numeric(bag3Ints))
# protBiorepIntensityImputed[,c(2:ncol(protBiorepIntensityImputed))] <-
#   do.call(rbind, apply(protBiorepIntensityImputed[,c(2:17)], MARGIN = 1,
#                       FUN = function(x) {x/bag3Ints*bag3Mean}))
#Imputes values by taking tail of normal distribution
protBiorepIntensityNormalized[,2:ncol(protBiorepIntensityNormalized)] <- apply(X = protBiorepIntensityNormalized[,2:ncol(protBiorepIntensityNormalized)],
MARGIN = 2, FUN = impute_missing_values)
protBiorepIntensityNormalized <- merge(protBiorepIntensityNormalized, saintqPeptides[,c("Prey", "PreyGeneSingleName")], by.x="Proteins", by.y="Prey", all.x=T, all.y=F)
protBiorepIntensityNormalized <- protBiorepIntensityNormalized[!duplicated(protBiorepIntensityNormalized),]
saintqInts <- protBiorepIntensityNormalized[protBiorepIntensityNormalized$PreyGeneSingleName %in% row.names(scoreM2),] #NOTE: intentionally leaving out those witout geneName
head(protBiorepIntensityNormalized)
protBiorepIntensityNormalized <- protBiorepIntensity
#Median normalization
medians <- apply(protBiorepIntensityNormalized[,2:ncol(protBiorepIntensityNormalized)], 2, function(x){median(x[x!=0], na.rm=T)})
protBiorepIntensityNormalized[2:ncol(protBiorepIntensityNormalized)] <- apply(X = protBiorepIntensityNormalized[,2:ncol(protBiorepIntensityNormalized)],
MARGIN = 2, FUN = function(x) x/median(x[x!=0], na.rm = T)*mean(medians))
# #Bait normalization
# bag3Ints <- protBiorepIntensity[protBiorepIntensity$Proteins=="O95817",2:17]
# bag3Ints[bag3Ints==0] <- 1
# bag3Mean <- mean(as.numeric(bag3Ints))
# protBiorepIntensityImputed[,c(2:ncol(protBiorepIntensityImputed))] <-
#   do.call(rbind, apply(protBiorepIntensityImputed[,c(2:17)], MARGIN = 1,
#                       FUN = function(x) {x/bag3Ints*bag3Mean}))
#Imputes values by taking tail of normal distribution
protBiorepIntensityNormalizedImputed <- protBiorepIntensityNormalized
protBiorepIntensityNormalizedImputed[,2:ncol(protBiorepIntensityNormalizedImputed)] <- apply(X = protBiorepIntensityNormalizedImputed[,2:ncol(protBiorepIntensityNormalizedImputed)],
MARGIN = 2, FUN = impute_missing_values)
protBiorepIntensityNormalizedImputed <- merge(protBiorepIntensityNormalizedImputed, saintqPeptides[,c("Prey", "PreyGeneSingleName")], by.x="Proteins", by.y="Prey", all.x=T, all.y=F)
protBiorepIntensityNormalizedImputed <- protBiorepIntensityNormalizedImputed[!duplicated(protBiorepIntensityNormalizedImputed),]
head(protBiorepIntensityNormalizedImputed)
saintqInts <- protBiorepIntensityNormalizedImputed[protBiorepIntensityNormalizedImputed$PreyGeneSingleName %in% row.names(scoreM2),] #NOTE: intentionally leaving out those witout geneName
head(saintqInts)
pheatmap(scoreM2, cluster_rows=T, cluster_cols=T, color = c1,
scale="none", fontsize_row=12 ,fontsize_col=12,
cellwidth=12, cellheight=12, fontsize_number=12*(2/5),
border_color="black", display_numbers=F, drop_levels=F, filename=paste("_heatmap.pdf",sep=""))
pheatmap(scoreM2, cluster_rows=T, cluster_cols=T, color = c2,
scale="none", fontsize_row=12 ,fontsize_col=12,
cellwidth=12, cellheight=12, fontsize_number=12*(2/5),
border_color="black", display_numbers=F, drop_levels=F, filename=paste("_heatmap.pdf",sep=""))
c1=colorRampPalette(c("gray75", "gray75"))(25)
c2=colorRampPalette(c("gray75", "darkblue"))(50)
c3=c(c1, c2)
#NOTE: PLOTTING BY SCORE IS ***NOT*** CORRECT, BUT KEEPING IT AS A TEMPORARY THING
pheatmap(scoreM2, cluster_rows=T, cluster_cols=T, color = c3,
scale="none", fontsize_row=12 ,fontsize_col=12,
cellwidth=12, cellheight=12, fontsize_number=12*(2/5),
border_color="black", display_numbers=F, drop_levels=F, filename=paste("_heatmap.pdf",sep=""))
source('~/Documents/Projects/JPB_endoBAG3homo_CMs_test/scripts/process4saintq_2.R', echo=TRUE)
parse_maxquant(proteinGroupsFile = "./SetA+B+C+D_Fusion/txt/proteinGroups.txt", evidenceFile = "./SetA+B+C+D_Fusion/txt/evidence.txt", annotationFile = "./SetA+B+C+D_Fusion/annotation.txt")
head(contaminants)
hhead(evidence)
head(evidence)
head(final_result)
head(keys)
head(peptideBiorepIntensity)
head(protBiorepIntensity)
head(proteinGroups)
head(final_result)
library(MSstats)
library(ggplot2)
library(reshape2)
library(pheatmap)
head(keys)
annotation <- keys
remove(keys)
head(protBiorepIntensity)
head(peptideBiorepIntensity)
annot2 <- annot
annot2 <- annotation
annot2$Condition <- paste(annot$Condition, "_#", 1:nrow(annot), sep="")
annot2 <- annotation
annot2$Condition <- paste(annot2$Condition, "_#", 1:nrow(annot2), sep="")
head(annot2)
head(annotation)
msStatsInput<-MaxQtoMSstatsFormat(evidence = evidence, annotation = annot2,
proteinGroups = proteinGroups)
head(evidence)
names(evidence)
head(annot2)
msStatsInput<-MaxQtoMSstatsFormat(evidence = evidence, annotation = annot2,
proteinGroups = proteinGroups)
names(proteinGroups)
names(infile)
names(evidence)
msStatsInput<-MaxQtoMSstatsFormat(evidence = evidence, annotation = annot2,
proteinGroups = proteinGroups)
evidence<-read.table("./SetA+B+C+D_Fusion/txt/evidence.txt", sep="\t",
header=T, stringsAsFactors = F)
msStatsInput<-MaxQtoMSstatsFormat(evidence = evidence, annotation = annot2,
proteinGroups = proteinGroups)
annot<-read.table("./SetA+B+C+D_Fusion/annotation.txt", sep="\t",
header=T, stringsAsFactors = F) #file is made from the make_annotation custom function.
#Using "annot2" every sample is treated separately.
annot2 <- annot
annot2$Condition <- paste(annot2$Condition, "_#", 1:nrow(annot2), sep="")
proteinGroups<-read.table("./SetA+B+C+D_Fusion/txt/proteinGroups.txt", sep="\t",
header=T, stringsAsFactors = F)
msStatsInput<-MaxQtoMSstatsFormat(evidence = evidence, annotation = annot2,
proteinGroups = proteinGroups)
head(msStatsInput)
help("dataProcess")
msStatsProc_medianNorm<-dataProcess(msStatsInput, normalization = 'equalizeMedians',
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
names(msStatsProc_medianNorm)
head(msStatsProc_medianNorm$ProcessedData)
dir.create("./msStats/", showWarnings = TRUE)
dir.create("./msStats/", showWarnings = TRUE)
dataProcessPlots(msStatsProc_medianNorm, type = "ProfilePlot", address = "./msStats/BAG3_medianNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_medianNorm, type = "QCPlot", address = "./msStats/BAG3_medianNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
head(msStatsInput)
annotation
msStatsInput <- msStatsInput[!grepl("_iPS|HSPB7", msStatsInput$Condition),]
head(msStatsInput)
msStatsProc_medianNorm<-dataProcess(msStatsInput, normalization = 'equalizeMedians',
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
dir.create("./msStats/", showWarnings = TRUE)
dataProcessPlots(msStatsProc_medianNorm, type = "ProfilePlot", address = "./msStats/BAG3_medianNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_medianNorm, type = "QCPlot", address = "./msStats/BAG3_medianNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
table(msStatsInput$Condition)
msStatsInput <- msStatsInput[!grepl("iPS_|HSPB7", msStatsInput$Condition),]
table(msStatsInput$Condition)
msStatsProc_medianNorm<-dataProcess(msStatsInput, normalization = 'equalizeMedians',
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
#Run DataProcess. Only significant hits
# msStatsProcSig_noNorm<-dataProcess(msStatsInputSig, normalization = FALSE,
#                                    nameStandards="O95817", cutoffCensored = "minFeature",
#                                    summaryMethod = "TMP", equalFeatureVar = FALSE, MBimpute = TRUE,
#                                    fillIncompleteRows = TRUE)
# msStatsProcSig_baitNorm<-dataProcess(msStatsInputSig, normalization = 'globalStandards',
#                                      nameStandards="O95817", cutoffCensored = "minFeature",
#                                      summaryMethod = "TMP", equalFeatureVar = FALSE, MBimpute = TRUE,
#                                      fillIncompleteRows = TRUE)
dir.create("./msStats/", showWarnings = TRUE)
dataProcessPlots(msStatsProc_medianNorm, type = "ProfilePlot", address = "./msStats/BAG3_medianNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_medianNorm, type = "QCPlot", address = "./msStats/BAG3_medianNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
head(msStatsInput)
msStatsProc_noNorm<-dataProcess(msStatsInput, normalization = FALSE,
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = FALSE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
dir.create("./msStats/", showWarnings = TRUE)
dataProcessPlots(msStatsProc_noNorm, type = "ProfilePlot", address = "./msStats/BAG3_noNormalized",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_noNorm, type = "QCPlot", address = "./msStats/BAG3_noNormalized",
text.size = 2, which.Protein = "O95817") #Quality control Plot
head(msStatsInput)
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = c("O95817")
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = c("O95817"),
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
dataProcessPlots(msStatsProc_baitNorm, type = "ProfilePlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_baitNorm, type = "QCPlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
msStatsProc_noNorm$ProcessedData$GROUP_ORIGINAL
levels(msStatsProc_noNorm$ProcessedData$GROUP_ORIGINAL)
rep(5, 2)
comparisonTemplate <- rep(0, length(levels(msStatsProc_noNorm$ProcessedData$GROUP_ORIGINAL)))
comparisonTemplate
head(msStatsInput)
table(msStatsInput)
table(msStatsInput$PrecursorCharge)
plot(table(msStatsInput$PrecursorCharge))
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817",]
head(bag3Peptides)
table(bag3Peptides[c("PeptideSequence", "Condition"),])
annot<-read.table("./SetA+B+C+D_Fusion/annotation.txt", sep="\t",
header=T, stringsAsFactors = F) #file is made from the make_annotation custom function.
msStatsInput<-MaxQtoMSstatsFormat(evidence = evidence, annotation = annot,
proteinGroups = proteinGroups)
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817",]
head(bag3Peptides)
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" && !is.na(msStatsInput$Intensity),]
head(bag3Peptides)
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
head(bag3Peptides)
bag3Peptides[bag3Peptides$Condition=="WTc11",]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3PeptidesInControl
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
head(bag3Peptides)
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
table(msStatsInput$Condition)
msStatsInput <- msStatsInput[!grepl("iPS_|HSPB7|RBM20", msStatsInput$Condition),]
table(msStatsInput$Condition)
table(bag3Peptides$PeptideSequence)
table(bag3Peptides$PeptideSequence, exclude = 0)
table(droplevels(bag3Peptides$PeptideSequence))
head(msStatsInput)
table(droplevels(paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge))
table(droplevels(paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge)))
table(droplevels(paste0(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge)))
paste0(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge)
table(droplevels(paste0(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge)))
table(paste0(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge))
table(msStatsInput$Condition)
msStatsInput[msStatsInput$PeptideSequence=="VQGLEQAVDNFEGK2=",]
msStatsInput[msStatsInput$PeptideSequence=="VQGLEQAVDNFEGK",]
table(msStatsInput$Condition)
table(paste0(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge))
msStatsInput[msStatsInput$PeptideSequence=="VQGLEQAVDNFEGK" & msStatsInput$PrecursorCharge==2,]
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
head(bag3Peptides)
table(is.na(bag3Peptides$Intensity))
table(paste0(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge))
bag3Peptides$PeptideCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
head(bag3Peptides)
table(bag3Peptides$PeptideCharge)
max(table(bag3Peptides$PeptideCharge))
table(bag3Peptides$Condition)
table(table(bag3Peptides$PeptideCharge))
msStatsInput
head(msStatsInput)
bag3Peptides <- bag3Peptides$PeptideSequence
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
bag3Peptides$PeptideCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
bag3PeptideStandards <- bag3Peptides$PeptideSequence
bag3PeptideStandards
bag3PeptideStandards <- unique(droplevels(bag3Peptides$PeptideSequence))
bag3PeptideStandards
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity) & grepl(pattern = "(ph)", x = msStatsInput$PeptideSequence),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
bag3Peptides$PeptideCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
bag3PeptideStandards <- unique(droplevels(bag3Peptides$PeptideSequence))
bag3PeptideStandards
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity) & !grepl(pattern = "(ph)", x = msStatsInput$PeptideSequence),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
bag3Peptides$PeptideCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
bag3PeptideStandards <- unique(droplevels(bag3Peptides$PeptideSequence))
bag3PeptideStandards
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = bag3PeptideStandards,
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
as.vector(bag3PeptideStandards)
bag3PeptideStandards <- as.vector(unique(droplevels(bag3Peptides$PeptideSequence)))
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = bag3PeptideStandards,
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
dataProcessPlots(msStatsProc_baitNorm, type = "ProfilePlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_baitNorm, type = "QCPlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
bag3PeptideStandards
bag3PeptideStandards
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = c("O95817"),
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
dataProcessPlots(msStatsProc_baitNorm, type = "ProfilePlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_baitNorm, type = "QCPlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
bag3Peptides$PeptideCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
bag3PeptideStandards <- as.vector(unique(droplevels(bag3Peptides$PeptideSequence)))
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = c("O95817"),
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
dataProcessPlots(msStatsProc_baitNorm, type = "ProfilePlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_baitNorm, type = "QCPlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
bag3PeptidesInControl
bag3PeptideStandards
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
head(bag3Peptides)
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity) & !grepl(pattern = "(ph)", x = msStatsInput$PeptideSequence),]
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity) & !grepl(pattern = "(ph)", x = msStatsInput$PeptideSequence),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]
bag3Peptides$PeptideCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
bag3PeptideStandards <- as.vector(unique(droplevels(bag3Peptides$PeptideSequence)))
bag3PeptideStandards
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "(ph)", x = msStatsInput$PeptideSequence),]
head(bag3PeptidesPhosphorylated)
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "(ph)", x = msStatsInput$PeptideSequence),]
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
head(bag3Peptides)
tail(bag3Peptides)
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
head(bag3Peptides)
bag3Peptides$PeptideSequence
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "(ph)", x = msStatsInput$PeptideSequence),]
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "(ph)", x = bag3Peptides$PeptideSequence),]
head(bag3PeptidesPhosphorylated)
bag3PeptidesPhosphorylated <- gsub(pattern = "(ph)", replacement = "", x = bag3PeptidesPhosphorylated$PeptideSequence)#only the sequence
bag3PeptidesPhosphorylated
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "(ph)", x = bag3Peptides$PeptideSequence),]
bag3PeptidesPhosphorylated <- gsub(pattern = "//(ph//)", replacement = "", x = bag3PeptidesPhosphorylated$PeptideSequence)#only the sequence
bag3PeptidesPhosphorylated
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "(ph)", x = bag3Peptides$PeptideSequence),]
bag3PeptidesPhosphorylated <- gsub(pattern = "\\(ph\\)", replacement = "", x = bag3PeptidesPhosphorylated$PeptideSequence)#only the sequence
bag3PeptidesPhosphorylated
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "\\(ph\\)", x = bag3Peptides$PeptideSequence),]
bag3PeptidesPhosphorylated <- gsub(pattern = "\\(ph\\)", replacement = "", x = bag3PeptidesPhosphorylated$PeptideSequence)#only the sequence
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]#removes those in control
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesPhosphorylated,]#removes those with phosphorylation
bag3Peptides$PeptideSequenceCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
bag3PeptideStandards <- as.vector(unique(droplevels(bag3Peptides$PeptideSequence)))
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = c("O95817"),
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
dataProcessPlots(msStatsProc_baitNorm, type = "ProfilePlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_baitNorm, type = "QCPlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = bag3PeptideStandards,
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
dataProcessPlots(msStatsProc_baitNorm, type = "ProfilePlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_baitNorm, type = "QCPlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "\\(ph\\)", x = bag3Peptides$PeptideSequence),]
bag3PeptidesPhosphorylated <- gsub(pattern = "\\(ph\\)", replacement = "", x = bag3PeptidesPhosphorylated$PeptideSequence)#only the sequence
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]#removes those in control
#bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesPhosphorylated,]#removes those with phosphorylation
bag3Peptides$PeptideSequenceCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
bag3PeptideStandards <- as.vector(unique(droplevels(bag3Peptides$PeptideSequence)))
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "\\(ph\\)", x = bag3Peptides$PeptideSequence),]
bag3PeptidesPhosphorylated <- gsub(pattern = "\\(ph\\)", replacement = "", x = bag3PeptidesPhosphorylated$PeptideSequence)#only the sequence
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]#removes those in control
#bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesPhosphorylated,]#removes those with phosphorylation
bag3Peptides$PeptideSequenceCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
bag3PeptideStandards <- as.vector(unique(droplevels(bag3Peptides$PeptideSequence)))
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = bag3PeptideStandards,
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
dataProcessPlots(msStatsProc_baitNorm, type = "ProfilePlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_baitNorm, type = "QCPlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
msStatsProc_noNorm<-dataProcess(msStatsInput, normalization = FALSE,
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = FALSE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
msStatsProc_medianNorm<-dataProcess(msStatsInput, normalization = 'equalizeMedians',
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
#For normalization on global standards (BAG3), limit it to the ions that are (a) not present in the control (one rep has a few there)
#and (b) present in all others (NOTE: this excluded by now) and (c) not phosphorylated (NOTE: not used, as it seemed to throw off normalization)
bag3Peptides <- msStatsInput[msStatsInput$ProteinName=="O95817" & !is.na(msStatsInput$Intensity),]
bag3PeptidesPhosphorylated <- bag3Peptides[grepl(pattern = "\\(ph\\)", x = bag3Peptides$PeptideSequence),]
bag3PeptidesPhosphorylated <- gsub(pattern = "\\(ph\\)", replacement = "", x = bag3PeptidesPhosphorylated$PeptideSequence)#only the sequence
bag3PeptidesInControl <- bag3Peptides[bag3Peptides$Condition=="WTc11","PeptideSequence"]
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesInControl,]#removes those in control
bag3Peptides <- bag3Peptides[!bag3Peptides$PeptideSequence %in% bag3PeptidesPhosphorylated,]#removes those with phosphorylation
bag3Peptides$PeptideSequenceCharge <- paste(bag3Peptides$PeptideSequence, bag3Peptides$PrecursorCharge, sep="_")
bag3PeptideStandards <- as.vector(unique(droplevels(bag3Peptides$PeptideSequence)))
msStatsProc_baitNorm<-dataProcess(msStatsInput, normalization = 'globalStandards', nameStandards = bag3PeptideStandards,
cutoffCensored = "minFeature", summaryMethod = "TMP",
equalFeatureVar = TRUE, MBimpute = TRUE,
fillIncompleteRows = TRUE)
#Run DataProcess. Only significant hits
# msStatsProcSig_noNorm<-dataProcess(msStatsInputSig, normalization = FALSE,
#                                    nameStandards="O95817", cutoffCensored = "minFeature",
#                                    summaryMethod = "TMP", equalFeatureVar = FALSE, MBimpute = TRUE,
#                                    fillIncompleteRows = TRUE)
# msStatsProcSig_baitNorm<-dataProcess(msStatsInputSig, normalization = 'globalStandards',
#                                      nameStandards="O95817", cutoffCensored = "minFeature",
#                                      summaryMethod = "TMP", equalFeatureVar = FALSE, MBimpute = TRUE,
#                                      fillIncompleteRows = TRUE)
#Plots - all hits
dir.create("./msStats/", showWarnings = TRUE)
dataProcessPlots(msStatsProc_noNorm, type = "ProfilePlot", address = "./msStats/BAG3_noNormalized",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_noNorm, type = "QCPlot", address = "./msStats/BAG3_noNormalized",
text.size = 2, which.Protein = "O95817") #Quality control Plot
dir.create("./msStats/", showWarnings = TRUE)
dataProcessPlots(msStatsProc_medianNorm, type = "ProfilePlot", address = "./msStats/BAG3_medianNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_medianNorm, type = "QCPlot", address = "./msStats/BAG3_medianNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
dataProcessPlots(msStatsProc_baitNorm, type = "ProfilePlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", save_condition_plot_result = T, text.size=2) #per protein Plot with intensities
dataProcessPlots(msStatsProc_baitNorm, type = "QCPlot", address = "./msStats/BAG3_baitNorm",
which.Protein = "O95817", text.size = 2) #Quality control Plot
head(protBiorepIntensity)
protBiorepIntensity[protBiorepIntensity$Proteins=="Q9UBY9",]
plot(protBiorepIntensity[protBiorepIntensity$Proteins=="Q9UBY9",])
levels(msStatsProc_noNorm$ProcessedData$GROUP_ORIGINAL)
comparisonTemplate <- rep(0, length(levels(msStatsProc_noNorm$ProcessedData$GROUP_ORIGINAL)))
comparisonTemplate
comparisonTemplate <- rep(0, length(levels(msStatsProc_noNorm$ProcessedData$GROUP_ORIGINAL)))
comparison_A4vsCMcontrol <- matrix(c(1, 0, 0, 0, 0, 0, 0, -1), nrow=1)
comparison_A4vsCMcontrol <- matrix(c(1, 0, 0, 0, 0, 0, 0, -1), nrow=1)
comparison_homoDMSOvsCMcontrol <- matrix(c(0, 0, 0, 1, 0, 0, 0, -1), nrow=1)
comparison_homoDMSOvsTetOnBAG3 <- matrix(c(0, 0, 0, 1, 0, 0, -1, 0), nrow=1)
comparisonTemplate <- rep(0, length(levels(msStatsProc_noNorm$ProcessedData$GROUP_ORIGINAL)))
comparison_A4vsCMcontrol <- matrix(c(1, 0, 0, 0, 0, 0, 0, -1), nrow=1)
comparison_homoDMSOvsCMcontrol <- matrix(c(0, 0, 0, 1, 0, 0, 0, -1), nrow=1)
comparison_homoDMSOvsTetOnBAG3 <- matrix(c(0, 0, 0, 1, 0, 0, -1, 0), nrow=1)
comparison<-rbind(comparison_A4vsCMcontrol, comparison_homoDMSOvsCMcontrol, comparison_homoDMSOvsTetOnBAG3)
row.names(comparison)<- c("comparison_A4vsCMcontrol", "comparison_homoDMSOvsCMcontrol", "comparison_homoDMSOvsTetOnBAG3")
msStatsComparison<-groupComparison(comparison, data=msStatsProc_noNorm)
groupComparisonPlots(data= msStatsComparison$ComparisonResult, type="VolcanoPlot", address = "VolcanoPlotTest.pdf")
head(peptideBiorepIntensity)
head(msStatsProc_noNorm)
head(msStatsInput)
plot(density(peptideBiorepIntensity$A4_1))
plot(density(log(peptideBiorepIntensity$A4_1)))
plot(density(log10(peptideBiorepIntensity$A4_1)))
plot(density(log2(peptideBiorepIntensity$A4_1)))
plot(density(log10(peptideBiorepIntensity$A4_1)))
qnorm(log10(peptideBiorepIntensity$A4_1)
qnorm(log10(peptideBiorepIntensity$A4_1))
qqnorm(log10(peptideBiorepIntensity$A4_1))
shapiro.test(my_data$len)(log10(peptideBiorepIntensity$A4_1))
shapiro.test(log10(peptideBiorepIntensity$A4_1))
head(protBiorepIntensity)
shapiro.test(log10(peptideBiorepIntensity$A4_1[peptideBiorepIntensity$A4_1!=0]))
plot(density(log10(peptideBiorepIntensity$A4_1)))
qqnorm(log10(peptideBiorepIntensity$A4_1[peptideBiorepIntensity$A4_1!=0]))
plot(protBiorepIntensity[protBiorepIntensity$Proteins=="P11142",])
protBiorepIntensity[protBiorepIntensity$Proteins=="P11142",]
groupComparisonPlots(data= msStatsComparison$ComparisonResult, type="VolcanoPlot", address = "VolcanoPlotTest.pdf", sig = 0.2)
library(MSstats)
groupComparisonPlots(data= msStatsComparison$ComparisonResult, type="VolcanoPlot", address = "VolcanoPlotTest.pdf", sig = 0.2)
head(final_result)
protData <- final_result[-2]
row.names(protData) <- protData[,1]
protData <- protData[-1]
protDataCor <- cor(protData, use="pairwise.complete.obs", method="pearson")
pheatmap(protDataCor)
library(pheatmap)
protData <- final_result[-2]
row.names(protData) <- protData[,1]
protData <- protData[-1]
protDataCor <- cor(protData, use="pairwise.complete.obs", method="pearson")
pheatmap(protDataCor)
protData <- final_result[-2]
row.names(protData) <- protData[,1]
protData <- protData[-1]
protDataCor <- cor(protData, use="pairwise.complete.obs", method="pearson")
pheatmap(protDataCor)
pheatmap(protDataCor, filename = "./heatmap_protein_unprocessed.pdf")
source('~/Documents/Projects/finalAPMS_analysis/quickProcess.R')
source('~/Documents/Projects/finalAPMS_analysis/quickProcess.R')
parse_maxquant()
parse_maxquant
#Combining with the dilated cardiomyopathy database.
require(xlsx)
dcmSetAll<-read.xlsx("~/Desktop/JPB_376-381_endoBAG3_CMs_test/RNASeqExpression_CardiomyopathyGenes_ExpandedPanel.xlsx", sheetIndex = 1)
dcmSetAll<-merge(dcmSetAll, uniprot[], by.x="Combined", by.y="GeneName", all.x = F)
dcmSet<-dcmSetAll$ID #This is the set that was used for the venn diagram
library(xlsx)
install.packages("xlsx")
library(xlsx)
install.packages("rJava")
library(xlsx)
